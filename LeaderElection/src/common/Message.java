package common;

/**
 * This class represents messages sent between machines. Each message contains a
 * sender, receiver, type, and content.
 * 
 * @author kwang01
 *
 */
public class Message {

	/**
	 * What type of message this is. All types across the various simulations
	 * are defined in this enum type, being split into common, baseline, mst,
	 * and shortest path types as indicated by their prefixes.
	 */
	public enum MessageType {
		/* common */
		MSG_ACK_LEADER, MSG_LEADER_BROADCAST_SIMPLE, MSG_QUERY_SIMPLE, MSG_KILL,

		/* baseline */
		MSG_BASELINE_ELECT_LEADER,

		/* mst */
		MSG_MST_CONNECT, MSG_MST_ACCEPT, MSG_MST_REJECT, MSG_MST_REPORT, MSG_MST_CHANGEROOT, MSG_MST_INITIATE, MSG_MST_TEST, MSG_MST_FINISH,

		/* path */
		MSG_PATH_PARTIAL, MSG_PATH_FINAL,
	}

	/**
	 * Sender and receiver IDs (randomly generated by the simulation)
	 */
	private int sender;
	private int receiver;

	/**
	 * The message's type
	 */
	private MessageType type;

	/**
	 * The messages content. In the various simulations, this content is
	 * overridden and customized by classes such as {@see mst.MSTMessageContent}
	 * for an example.
	 */
	private MessageContent content;

	/**
	 * Simple constructor
	 * 
	 * @param sender
	 * @param receiver
	 * @param type
	 * @param content
	 */
	public Message(int sender, int receiver, MessageType type, MessageContent content) {
		this.sender = sender;
		this.receiver = receiver;
		this.content = content;
		this.type = type;
	}

	/**
	 * Simple getter
	 * 
	 * @return sender
	 */
	public int getSender() {
		return sender;
	}

	/**
	 * Simple getter
	 * 
	 * @return receiver
	 */
	public int getReceiver() {
		return receiver;
	}

	/**
	 * Simple getter
	 * 
	 * @return message type
	 */
	public MessageType getType() {
		return type;
	}

	/**
	 * Simple getter
	 * 
	 * @return content
	 */
	public MessageContent getContent() {
		return content;
	}

	/**
	 * Determines whether a message is part of MST initialization
	 * 
	 * @return boolean value indicating above.
	 */
	public boolean isMSTInitialization() {
		return (type == MessageType.MSG_MST_CONNECT || type == MessageType.MSG_MST_ACCEPT
				|| type == MessageType.MSG_MST_REJECT || type == MessageType.MSG_MST_REPORT
				|| type == MessageType.MSG_MST_CHANGEROOT || type == MessageType.MSG_MST_INITIATE
				|| type == MessageType.MSG_MST_TEST);
	}

}
